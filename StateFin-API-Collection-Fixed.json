{
	"info": {
		"_postman_id": "statefin-api-collection-fixed",
		"name": "StateFin API Collection - Fixed",
		"description": "Comprehensive API collection for StateFin User Management System with RBAC (Fixed Version)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.accessToken) {",
									"        pm.environment.set('accessToken', response.data.accessToken);",
									"        pm.environment.set('refreshToken', response.data.refreshToken);",
									"        console.log('Tokens saved successfully');",
									"    }",
									"}",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains access token', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('accessToken');",
									"    pm.expect(jsonData.data).to.have.property('refreshToken');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"Admin123!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Authenticate user and receive JWT tokens"
					},
					"response": []
				},
				{
					"name": "Register User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"newuser\",\n    \"email\": \"newuser@example.com\",\n    \"password\": \"NewUser123!\",\n    \"firstName\": \"New\",\n    \"lastName\": \"User\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "Register a new user account"
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.accessToken) {",
									"        pm.environment.set('accessToken', response.data.accessToken);",
									"        pm.environment.set('refreshToken', response.data.refreshToken);",
									"        console.log('Tokens refreshed successfully');",
									"    }",
									"}",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refreshToken\": \"{{refreshToken}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/refresh",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"refresh"
							]
						},
						"description": "Refresh JWT access token using refresh token"
					},
					"response": []
				}
			]
		},
		{
			"name": "User Management",
			"item": [
				{
					"name": "Get Current User",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/users/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"me"
							]
						},
						"description": "Get the currently authenticated user's profile"
					},
					"response": []
				},
				{
					"name": "Get All Users",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/users?page=0&size=20&sortDir=asc&sortBy=id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								},
								{
									"key": "sortDir",
									"value": "asc"
								},
								{
									"key": "sortBy",
									"value": "id"
								}
							]
						},
						"description": "Get paginated list of all users (requires USER_READ permission)"
					},
					"response": []
				},
				{
					"name": "Get User by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.id) {",
									"        pm.environment.set('userId', response.data.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						},
						"description": "Get user details by ID (requires USER_READ permission)"
					},
					"response": []
				},
				{
					"name": "Update User",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Updated\",\n    \"lastName\": \"User\",\n    \"email\": \"updated@example.com\",\n    \"active\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						},
						"description": "Update user details (requires USER_WRITE permission)"
					},
					"response": []
				},
				{
					"name": "Delete User",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						},
						"description": "Soft delete user (requires USER_DELETE permission)"
					},
					"response": []
				},
				{
					"name": "Assign Role to User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/users/{{userId}}/roles/{{roleId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}",
								"roles",
								"{{roleId}}"
							]
						},
						"description": "Assign a role to a user (requires USER_WRITE permission)"
					},
					"response": []
				},
				{
					"name": "Remove Role from User",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/users/{{userId}}/roles/{{roleId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}",
								"roles",
								"{{roleId}}"
							]
						},
						"description": "Remove a role from a user (requires USER_WRITE permission)"
					},
					"response": []
				}
			]
		},
		{
			"name": "Role Management",
			"item": [
				{
					"name": "Get All Roles",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/roles?page=0&size=20&sortDir=asc&sortBy=id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"roles"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								},
								{
									"key": "sortDir",
									"value": "asc"
								},
								{
									"key": "sortBy",
									"value": "id"
								}
							]
						},
						"description": "Get paginated list of all roles (requires ROLE_READ permission)"
					},
					"response": []
				},
				{
					"name": "Get Role by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.id) {",
									"        pm.environment.set('roleId', response.data.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/roles/{{roleId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"roles",
								"{{roleId}}"
							]
						},
						"description": "Get role details by ID (requires ROLE_READ permission)"
					},
					"response": []
				},
				{
					"name": "Create Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.id) {",
									"        pm.environment.set('newRoleId', response.data.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"NEW_ROLE\",\n    \"description\": \"A new role for testing\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/roles",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"roles"
							]
						},
						"description": "Create a new role (requires ROLE_WRITE permission)"
					},
					"response": []
				},
				{
					"name": "Update Role",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"Updated role description\",\n    \"active\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/roles/{{roleId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"roles",
								"{{roleId}}"
							]
						},
						"description": "Update role details (requires ROLE_WRITE permission)"
					},
					"response": []
				},
				{
					"name": "Delete Role",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/roles/{{roleId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"roles",
								"{{roleId}}"
							]
						},
						"description": "Delete role (requires ROLE_DELETE permission)"
					},
					"response": []
				},
				{
					"name": "Get Role Permissions",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/roles/{{roleId}}/permissions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"roles",
								"{{roleId}}",
								"permissions"
							]
						},
						"description": "Get all permissions for a specific role (requires ROLE_READ permission)"
					},
					"response": []
				},
				{
					"name": "Assign Permission to Role",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/roles/{{roleId}}/permissions/{{permissionId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"roles",
								"{{roleId}}",
								"permissions",
								"{{permissionId}}"
							]
						},
						"description": "Assign a permission to a role (requires ROLE_MANAGE permission)"
					},
					"response": []
				},
				{
					"name": "Remove Permission from Role",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/roles/{{roleId}}/permissions/{{permissionId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"roles",
								"{{roleId}}",
								"permissions",
								"{{permissionId}}"
							]
						},
						"description": "Remove a permission from a role (requires ROLE_MANAGE permission)"
					},
					"response": []
				}
			]
		},
		{
			"name": "Permission Management",
			"item": [
				{
					"name": "Get All Permissions",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/permissions?page=0&size=20&sortDir=asc&sortBy=id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"permissions"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								},
								{
									"key": "sortDir",
									"value": "asc"
								},
								{
									"key": "sortBy",
									"value": "id"
								}
							]
						},
						"description": "Get paginated list of all permissions (requires PERMISSION_READ permission)"
					},
					"response": []
				},
				{
					"name": "Get Permission by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.id) {",
									"        pm.environment.set('permissionId', response.data.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/permissions/{{permissionId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"permissions",
								"{{permissionId}}"
							]
						},
						"description": "Get permission details by ID (requires PERMISSION_READ permission)"
					},
					"response": []
				},
				{
					"name": "Create Permission",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.id) {",
									"        pm.environment.set('newPermissionId', response.data.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"CUSTOM_READ\",\n    \"description\": \"Custom read permission for testing\",\n    \"resource\": \"CUSTOM\",\n    \"action\": \"READ\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/permissions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"permissions"
							]
						},
						"description": "Create a new permission (requires PERMISSION_WRITE permission)"
					},
					"response": []
				},
				{
					"name": "Update Permission",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"Updated permission description\",\n    \"active\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/permissions/{{permissionId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"permissions",
								"{{permissionId}}"
							]
						},
						"description": "Update permission details (requires PERMISSION_WRITE permission)"
					},
					"response": []
				},
				{
					"name": "Delete Permission",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/permissions/{{permissionId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"permissions",
								"{{permissionId}}"
							]
						},
						"description": "Delete permission (requires PERMISSION_DELETE permission)"
					},
					"response": []
				},
				{
					"name": "Get All Resources",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/permissions/resources",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"permissions",
								"resources"
							]
						},
						"description": "Get all available resources (requires PERMISSION_READ permission)"
					},
					"response": []
				},
				{
					"name": "Get All Actions",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/permissions/actions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"permissions",
								"actions"
							]
						},
						"description": "Get all available actions (requires PERMISSION_READ permission)"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Check if we have an access token",
					"const accessToken = pm.environment.get('accessToken');",
					"const requestUrl = pm.request.url.toString();",
					"",
					"// Skip token check for auth endpoints",
					"if (!requestUrl.includes('/api/auth/') && !accessToken) {",
					"    console.log('Warning: No access token found. Please login first.');",
					"}",
					"",
					"// Auto-set default environment variables if not set",
					"if (!pm.environment.get('baseUrl')) {",
					"    pm.environment.set('baseUrl', 'http://localhost:8080');",
					"}",
					"",
					"// Set default IDs for testing if not already set",
					"if (!pm.environment.get('userId')) {",
					"    pm.environment.set('userId', '1');",
					"}",
					"if (!pm.environment.get('roleId')) {",
					"    pm.environment.set('roleId', '1');",
					"}",
					"if (!pm.environment.get('permissionId')) {",
					"    pm.environment.set('permissionId', '1');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test scripts",
					"pm.test('Response time is less than 2000ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);",
					"});",
					"",
					"// Check for common error responses",
					"if (pm.response.code === 401) {",
					"    pm.test('Unauthorized - Check access token', function () {",
					"        pm.expect.fail('Unauthorized access. Please check your access token.');",
					"    });",
					"}",
					"",
					"if (pm.response.code === 403) {",
					"    pm.test('Forbidden - Check permissions', function () {",
					"        pm.expect.fail('Insufficient permissions for this operation.');",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}